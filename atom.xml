<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangzhipeng404</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-06-29T08:32:06.469Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangzhipeng404</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用webpack打包时常用的一些插件</title>
    <link href="http://yoursite.com/2016/06/29/%E4%BD%BF%E7%94%A8webpack%E6%89%93%E5%8C%85%E6%97%B6%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/06/29/使用webpack打包时常用的一些插件/</id>
    <published>2016-06-29T02:17:56.000Z</published>
    <updated>2016-06-29T08:32:06.469Z</updated>
    
    <content type="html">&lt;p&gt;虽然之前已经看过很多webpack的教程，也动手写过一些小的测试用例来学习，但一直没有进行系统的记录，也没有对写过的东西进行系统化的整理，趁现在比较闲，开始整理一下webpack使用时一些通用的模块，同时构建好一个通用的开发目录，为以后开始新的项目的时候能够快速的进入开发，不必浪费时间在目录构建上面。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;初始化项目目录结构&quot;&gt;&lt;a href=&quot;#初始化项目目录结构&quot; class=&quot;headerlink&quot; title=&quot;初始化项目目录结构&quot;&gt;&lt;/a&gt;初始化项目目录结构&lt;/h1&gt;&lt;p&gt;新建项目主文件夹然后用git对项目进行管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mkdir  project&lt;br&gt;git init&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;webpack的安装与使用&quot;&gt;&lt;a href=&quot;#webpack的安装与使用&quot; class=&quot;headerlink&quot; title=&quot;webpack的安装与使用&quot;&gt;&lt;/a&gt;webpack的安装与使用&lt;/h1&gt;&lt;p&gt;电脑早就已经安装好了node，所以只要 npm install 一下就好了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install webpack -g&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后初始化项目结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm init&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在项目主目录中新建webpack.config.js,随便在网上找了一个完整的config示例，后续进行修改以满足自己的需求。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//webpack 配置示例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; webpack = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;webpack&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; commonsPlugin = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.optimize.CommonsChunkPlugin(&lt;span class=&quot;string&quot;&gt;&#39;common.js&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//插件项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plugins: [commonsPlugin],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//页面入口文件配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    entry: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index : &lt;span class=&quot;string&quot;&gt;&#39;./src/js/page/index.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//入口文件输出配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        path: &lt;span class=&quot;string&quot;&gt;&#39;dist/js/page&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filename: &lt;span class=&quot;string&quot;&gt;&#39;[name].js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//加载器配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loaders: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.css$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;style-loader!css-loader&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.js$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;jsx-loader?harmony&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.scss$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;style!css!sass?sourceMap&#39;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123; test: &lt;span class=&quot;regexp&quot;&gt;/\.(png|jpg)$/&lt;/span&gt;, loader: &lt;span class=&quot;string&quot;&gt;&#39;url-loader?limit=8192&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//其它解决方案配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resolve: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root: &lt;span class=&quot;string&quot;&gt;&#39;E:/github/flux-example/src&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//绝对路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        extensions: [&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.js&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.json&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.scss&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alias: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            AppStore : &lt;span class=&quot;string&quot;&gt;&#39;js/stores/AppStores.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ActionType : &lt;span class=&quot;string&quot;&gt;&#39;js/actions/ActionType.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            AppAction : &lt;span class=&quot;string&quot;&gt;&#39;js/actions/AppAction.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;plugins 是插件项，这里我们使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用。&lt;/li&gt;
&lt;li&gt;entry 是页面入口文件配置，output 是对应输出项配置（即入口文件最终要生成什么名字的文件、存放到哪里）&lt;/li&gt;
&lt;li&gt;module.loaders 是最关键的一块配置。它告知 webpack 每一种文件都需要使用什么加载器来处理&lt;/li&gt;
&lt;li&gt;最后是 resolve 配置&lt;h1 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; title=&quot;安装插件&quot;&gt;&lt;/a&gt;安装插件&lt;/h1&gt;&lt;h1 id=&quot;配置html-webpack-plugin&quot;&gt;&lt;a href=&quot;#配置html-webpack-plugin&quot; class=&quot;headerlink&quot; title=&quot;配置html-webpack-plugin&quot;&gt;&lt;/a&gt;配置html-webpack-plugin&lt;/h1&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;html-webpack-plugin可以自动快速的生成html文件，就不用每次还得手动重复的去建立html文件了。&lt;br&gt;安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install html-webpack-plugin –save-dev&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后修改config&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plugins: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HtmlwebpackPlugin(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      title: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;配置webpack-dev-server&quot;&gt;&lt;a href=&quot;#配置webpack-dev-server&quot; class=&quot;headerlink&quot; title=&quot;配置webpack-dev-server&quot;&gt;&lt;/a&gt;配置webpack-dev-server&lt;/h1&gt;&lt;p&gt;webpack-dev-server可以建立一个sever，监控文件的变化，实现页面自动刷新，所以开发的时候不需要手动刷新便可以看到改动的效果。&lt;br&gt;安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install webpack-dev-server –save-dev&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后修改config进行配置&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  devServer: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    historyApiFallback: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hot: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inline: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    progress: true,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后再package.json里面配置一下运行的命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;scripts&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;start&amp;quot;: &amp;quot;webpack-dev-server --hot --inline&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在项目根目录下输入&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm start&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就可以启动sever，在浏览器中打开localhost:8080就可以看到页面，接下来只要修改文件页面就会自动刷新了。&lt;/p&gt;
&lt;h1 id=&quot;配置loaders&quot;&gt;&lt;a href=&quot;#配置loaders&quot; class=&quot;headerlink&quot; title=&quot;配置loaders&quot;&gt;&lt;/a&gt;配置loaders&lt;/h1&gt;&lt;h1 id=&quot;css-scss&quot;&gt;&lt;a href=&quot;#css-scss&quot; class=&quot;headerlink&quot; title=&quot;css,scss&quot;&gt;&lt;/a&gt;css,scss&lt;/h1&gt;&lt;p&gt;处理css需要两种loader，css-loader 和 style-loader，css-loader会遍历css文件，找到所有的url(…)并且处理。style-loader会把所有的样式插入页面的一个style tag中。.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理。&lt;br&gt;安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install css-loader style-loader sass-loader –save-dev&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;es6和jsx&quot;&gt;&lt;a href=&quot;#es6和jsx&quot; class=&quot;headerlink&quot; title=&quot;es6和jsx&quot;&gt;&lt;/a&gt;es6和jsx&lt;/h1&gt;&lt;p&gt;es6的语法支持和jsx文件可以通过bable进行编译处理&lt;br&gt;安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install babel-loader babel-preset-es2015 –save-dev&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;处理图片和其他静态文件&quot;&gt;&lt;a href=&quot;#处理图片和其他静态文件&quot; class=&quot;headerlink&quot; title=&quot;处理图片和其他静态文件&quot;&gt;&lt;/a&gt;处理图片和其他静态文件&lt;/h1&gt;&lt;p&gt;url-loader可以处理静态资源，根据需求将图片自动转成base64编码的，可以减轻很多的网络请求。&lt;br&gt;安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install url-loader –save-dev&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最终config文件中的module.loader配置是这样的&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loaders: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //.css 文件使用 style-loader 和 css-loader 来处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123; test: /\.css$/, loader: &amp;apos;style-loader!css-loader&amp;apos; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //.js 文件使用 jsx-loader 来编译处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123; test: /\.jsx?$/, loader: &amp;apos;babel&amp;apos;,include: APP_PATH, query: &amp;#123; presets: [&amp;apos;es2015&amp;apos;] &amp;#125; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123; test: /\.scss$/, loader: &amp;apos;style!css!sass?sourceMap&amp;apos;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //图片文件使用 url-loader 来处理，小于8kb的直接转为base64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123; test: /\.(png|jpg)$/, loader: &amp;apos;url-loader?limit=8192&amp;apos;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;独立打包css&quot;&gt;&lt;a href=&quot;#独立打包css&quot; class=&quot;headerlink&quot; title=&quot;独立打包css&quot;&gt;&lt;/a&gt;独立打包css&lt;/h1&gt;&lt;p&gt;希望项目的样式能不要被打包到脚本中，而是独立出来作为.css，然后在页面中以&lt;link&gt;标签引入。这时候可以使用 extract-text-webpack-plugin&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install extract-text-webpack-plugin –save-dev&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在config中设置一下插件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var webpack = require(&amp;apos;webpack&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&amp;apos;common.js&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var ExtractTextPlugin = require(&amp;quot;extract-text-webpack-plugin&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        plugins: [commonsPlugin, new ExtractTextPlugin(&amp;quot;[name].css&amp;quot;)],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        entry: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //...省略其它配置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大致是完成了，接下来应该会学习一些插件的更多用法&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;虽然之前已经看过很多webpack的教程，也动手写过一些小的测试用例来学习，但一直没有进行系统的记录，也没有对写过的东西进行系统化的整理，趁现在比较闲，开始整理一下webpack使用时一些通用的模块，同时构建好一个通用的开发目录，为以后开始新的项目的时候能够快速的进入开发，不必浪费时间在目录构建上面。&lt;/p&gt;
    
    </summary>
    
      <category term="前端知识" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="前端知识" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="http://yoursite.com/2016/06/27/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2016/06/27/第一篇文章/</id>
    <published>2016-06-27T12:01:11.000Z</published>
    <updated>2016-06-28T07:18:22.469Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;第一次想要搭建一个blog不知道是几年之前了，自己搞过服务器用webpy搭建过一个简易的，也在csdn开通过，但都只是三分钟热度，并没有在上面发表过什么东西，肚子里没几滴墨水，大学几年也浑浑噩噩，没学到什么东西。
&lt;/em&gt;github也注册很久了，然而现在前端水平也只属于入门水平，并没有什么满意的项目推送到仓库。之前也有弄了一下gitpage，但是感觉并不方便，写博客的计划就又搁置了。知道最近发现hexo，而现在更换上班地点后到家比较早了，便又开始试了一下，作为一个前端，在发现页面主题和颜色可以自己编写之后又便根本停不下来了，折腾了半天之后，终于成了现在这个样子，虽然还需继续完善，但勉强也能看得下去了。&lt;br&gt;*毕业两年，作为前端工作也快满一年了，也逐渐开始深入学习，学习过程就在此记录吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;第一次想要搭建一个blog不知道是几年之前了，自己搞过服务器用webpy搭建过一个简易的，也在csdn开通过，但都只是三分钟热度，并没有在上面发表过什么东西，肚子里没几滴墨水，大学几年也浑浑噩噩，没学到什么东西。
&lt;/em&gt;github也注册很久了，然而现在前端水平
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
